---
- name: Install Passbolt
  hosts: localhost
  connection: local
  gather_facts: true

  tasks:
    - name: Installations
      block:
        - name: Update APT cache
          apt:
            update_cache: true
        - name: Basic Packages
          apt:
            name:
              - software-properties-common
              - gnupg
              - curl
              - python3-pymysql
            state: present
        - name: Add PHP Repo
          apt_repository:
            repo: ppa:ondrej/php
            state: present
        - name: Download Tailscale GPG key (modern method)
          get_url:
            url: "https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.noarmor.gpg"
            dest: /usr/share/keyrings/tailscale-archive-keyring.gpg
            mode: "0644"
        - name: Download Tailscale apt source list
          get_url:
            url: "https://pkgs.tailscale.com/stable/ubuntu/{{ ansible_lsb.codename }}.tailscale-keyring.list"
            dest: /etc/apt/sources.list.d/tailscale.list
            mode: "0644"
        - name: Update apt cache
          apt:
            update_cache: true
      become: true

    - name: Install nginx, MySQL, PHP 8.2, Tailscale
      apt:
        name:
          - nginx
          - mysql-server
          - php8.2
          - php8.2-fpm
          - php8.2-cli
          - composer
          - tailscale
          # Extensiones PHP adicionales
          - php8.2-gnupg
          - php8.2-intl
          - php8.2-mbstring
          - php8.2-xml
          - php8.2-gd
          - php8.2-imagick
          - php8.2-mysql
          - php8.2-curl
          - php8.2-ldap
        state: present
        update_cache: true
      become: true

    - name: Configure Mysql
      block:
        - name: Get current MySQL users (by socket)
          community.mysql.mysql_info:
            login_unix_socket: /var/run/mysqld/mysqld.sock
            filter: users
          register: mysql_users
          failed_when: false
          ignore_errors: true
        - name: Set MySQL root password using unix socket if needed
          community.mysql.mysql_user:
            name: root
            host: localhost
            password: "{{ mysql_root_password }}"
            plugin: mysql_native_password
            login_unix_socket: /var/run/mysqld/mysqld.sock
            state: present
          when: >
            mysql_users.users is defined and
            (mysql_users.users | selectattr('User', 'equalto', 'root') | selectattr('Host', 'equalto', 'localhost') | map(attribute='plugin') | first | default('')) != "mysql_native_password"
        - name: Remove root user on all hosts except localhost
          community.mysql.mysql_user:
            name: root
            host: "{{ item }}"
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"
          loop:
            - 127.0.0.1
            - ::1
            - "%"
        - name: Remove anonymous MySQL users
          community.mysql.mysql_user:
            name: ""
            host_all: true
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"
        - name: Remove MySQL test database
          community.mysql.mysql_db:
            name: test
            state: absent
            login_user: root
            login_password: "{{ mysql_root_password }}"
      become: true

    - name: Configure Mysql passbolt DB
      block:
        - name: Create Passbolt database
          community.mysql.mysql_db:
            name: "{{ passbolt_db_name }}"
            encoding: utf8mb4
            collation: utf8mb4_unicode_ci
            state: present
            login_user: root
            login_password: "{{ mysql_root_password }}"
        - name: Create Passbolt database user
          community.mysql.mysql_user:
            name: "{{ passbolt_db_user }}"
            password: "{{ passbolt_db_password }}"
            host: "localhost"
            priv: "{{ passbolt_db_name }}.*:ALL"
            state: present
            login_user: root
            login_password: "{{ mysql_root_password }}"
      become: true

    - name: Get Passbolt files
      block:
        - name: Ensure /var/www exists
          file:
            path: /var/www
            state: directory
            owner: www-data
            group: www-data
            mode: "0755"
        - name: Clone Passbolt repository
          git:
            repo: "https://github.com/passbolt/passbolt_api.git"
            dest: /var/www/passbolt_api
            version: master
            update: yes
            force: yes
        - name: Rename passbolt_api directory to passbolt
          command: mv /var/www/passbolt_api /var/www/passbolt
          args:
            removes: /var/www/passbolt_api
            creates: /var/www/passbolt
      become: true

    - name: Generate GPG
      block:
        - name: Ensure GPG config directory exists
          file:
            path: /var/www/passbolt/config/gpg
            state: directory
            owner: www-data
            group: www-data
            mode: "0700"
          become: true # Solo root puede crearla, y le pone owner www-data

        - name: Create GPG batch file
          copy:
            dest: /var/www/passbolt/config/gpg/gpg_batch
            content: |
              Key-Type: RSA
              Key-Length: 3072
              Key-Usage: sign,cert
              Subkey-Type: RSA
              Subkey-Length: 3072
              Subkey-Usage: encrypt
              Name-Real: Passbolt Server Key
              Name-Email: {{ gpg_email }}
              Expire-Date: 0
              %no-protection
              %commit
            owner: www-data
            group: www-data
            mode: "0600"
          become: true

        - name: Generate GPG key for Passbolt (only if not present)
          shell: |
            gpg --batch --no-tty --homedir /var/www/passbolt/config/gpg --gen-key /var/www/passbolt/config/gpg/gpg_batch
            rm /var/www/passbolt/config/gpg/gpg_batch
          args:
            creates: /var/www/passbolt/config/gpg/private-keys-v1.d
          become: true
          become_user: www-data

        - name: Export GPG private key (armor)
          shell: |
            gpg --homedir /var/www/passbolt/config/gpg --armor --export-secret-keys "{{ gpg_email }}" > /var/www/passbolt/config/gpg/serverkey_private.asc
          args:
            creates: /var/www/passbolt/config/gpg/serverkey_private.asc
          become: true
          become_user: www-data

        - name: Export GPG public key (armor)
          shell: |
            gpg --homedir /var/www/passbolt/config/gpg --armor --export "{{ gpg_email }}" > /var/www/passbolt/config/gpg/serverkey.asc
          args:
            creates: /var/www/passbolt/config/gpg/serverkey.asc
          become: true
          become_user: www-data

        - name: Ensure permissions of GPG key files
          file:
            path: "{{ item }}"
            owner: www-data
            group: www-data
            mode: "0600"
          loop:
            - /var/www/passbolt/config/gpg/serverkey.asc
            - /var/www/passbolt/config/gpg/serverkey_private.asc
          become: true
